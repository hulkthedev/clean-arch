openapi: 3.0.3

info:
  title: clean arch demo
  contact:
    url: 127.0.0.1:3666
    email: fatal.error.27@gmail.com
  version: "1.0"

servers:
  - url: 127.0.0.1:3666

paths:
  /ca-example/:
    put:
      summary: add user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserJsonRequest'
      responses:
        201:
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEmptyResponse'
        400:
          description: invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        415:
          description: invalid media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /ca-example/{userId}:
    get:
      summary: load user
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        400:
          description: invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        415:
          description: invalid media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    delete:
      summary: delete user
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEmptyResponse'
        400:
          description: invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        415:
          description: invalid media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    patch:
      summary: update user
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserJsonRequest'
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessEmptyResponse'
        400:
          description: invalid parameter syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        415:
          description: invalid media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
        500:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
components:
  schemas:
    AddUserJsonRequest:
      type: object
      properties:
        firstname:
          $ref: '#/components/parameters/firstname'
        lastname:
          $ref: '#/components/parameters/lastname'
        age:
          $ref: '#/components/parameters/age'
        gender:
          $ref: '#/components/parameters/gender'
        street:
          $ref: '#/components/parameters/street'
        houseNumber:
          $ref: '#/components/parameters/houseNumber'
        postcode:
          $ref: '#/components/parameters/postcode'
        city:
          $ref: '#/components/parameters/city'
        country:
          $ref: '#/components/parameters/country'
      required:
        - firstname
        - lastname
        - age
        - gender
        - street
        - houseNumber
        - postcode
        - city
        - country

    ClientErrorResponse:
      type: object
      properties:
        code:
          type: number
          description: |
            | Code | Description
            +------+------------
            |  -1  | Invalid parameter
            |  -2  | Invalid media type
            |  -3  | Invalid json content
        entities:
          type: array
          items:
            type: object
            properties: {}
            description: always empty on error

    ServerErrorResponse:
      type: object
      properties:
        code:
          type: number
          description: |
            | Code | Description
            +------+------------
            | -10  | PDO Exception
            | -11  | PDO Exception (no/wrong) login data
            | -12  | DB is empty
            | -13  | User not found
            | -14  | User can not be saved
            | -15  | User can not be deleted
            | -16  | User can not be updated
            | -99  | Unknown error
        entities:
          type: array
          items:
            type: object
            properties: {}
            description: always empty on error

    SuccessUserResponse:
      type: object
      properties:
        code:
          type: number
          description: |
            | Code | Description
            +------+------------
            |   1  | Success
        entities:
          type: array
          description: user dto
          items:
            type: object
            properties:
              id:
                $ref: '#/components/parameters/userId'
              firstname:
                $ref: '#/components/parameters/firstname'
              lastname:
                $ref: '#/components/parameters/lastname'
              age:
                $ref: '#/components/parameters/age'
              gender:
                $ref: '#/components/parameters/gender'
              street:
                $ref: '#/components/parameters/street'
              houseNumber:
                $ref: '#/components/parameters/houseNumber'
              postcode:
                $ref: '#/components/parameters/postcode'
              city:
                $ref: '#/components/parameters/city'
              country:
                $ref: '#/components/parameters/country'

    SuccessEmptyResponse:
      type: object
      properties:
        code:
          type: number
          description: |
            | Code | Description
            +------+------------
            |   2  | Succesful Created
            |   3  | Succesful No Content
        entities:
          type: array
          items:
            type: object
            properties: {}

  parameters:
    userId:
      name: userId
      in: path
      description: user id
      required: true
      example: 1
      schema:
        type: integer
    firstname:
      name: firstname
      in: query
      description: users firstname
      required: true
      example: Max
      schema:
        type: string
    lastname:
      name: lastname
      in: query
      description: users lastname
      required: true
      example: Mustermann
      schema:
        type: string
    age:
      name: age
      in: query
      description: users age
      required: true
      example: 30
      schema:
        type: integer
    gender:
      name: gender
      in: query
      description: users gender
      required: true
      example: m
      schema:
        type: string
    street:
      name: street
      in: query
      description: users street
      required: true
      example: Musterstrasse
      schema:
        type: string
    houseNumber:
      name: houseNumber
      in: query
      description: users house number
      required: true
      example: 11
      schema:
        type: string
    postcode:
      name: postcode
      in: query
      description: users postcode
      required: true
      example: 12345
      schema:
        type: string
    city:
      name: city
      in: query
      description: users city
      required: true
      example: Berlin
      schema:
        type: string
    country:
      name: country
      in: query
      description: users country
      required: true
      example: Deutschland
      schema:
        type: string